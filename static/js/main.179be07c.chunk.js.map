{"version":3,"sources":["utils/useHash/useHash.ts","utils/useCurrencies/useCurrencies.ts","utils/useAsync.ts","utils/index.ts","RippleButton.ts","CustomTextInput/pharseUserInput.tsx","CustomTextInput/CustomTextInput.styles.ts","CustomTextInput/CustomTextInput.tsx","CurrencyBlockWithDropdown/CurrencyBlockWithDropdown.styles.ts","CurrencyBlockWithDropdown/WrappedWithPrevNextButtons.tsx","CurrencyBlockWithDropdown/CurrencyBlockWithDropdown.tsx","MiddleSwapButton.tsx","ExchangeWidget/ExchangeWidget.styles.tsx","GlobalCurrencyDropdown.tsx","ExchangeWidget/ExchangeWidget.tsx","balanceAndRatesApi.ts","App/App.styles.tsx","App/App.tsx","index.tsx"],"names":["readHash","url","window","location","href","items","split","map","i","_","v","decodeURIComponent","Object","fromEntries","useHash","hashKey","defaultVal","useState","currentValue","setCurrentValue","useEffect","setFromHashIfChanged","e","newHashValue","newURL","addEventListener","removeEventListener","newVal","hashObj","entries","filter","hash","entriesString","k","join","length","useAsync","createPromise","isImmediate","isLoading","setLoading","hasTriggeredImmediately","setTriggeredImmediately","error","setError","data","setData","runAsync","useCallback","a","undefined","roundNumber","num","twoDigits","Number","parseFloat","toFixed","flooredValue","substring","areEqual","keys","from","to","every","key","themes","default","background","active","disabled","disabledText","text","lightBorder","dark","RippleButton","styled","button","theme","NormalButton","pharseUserInput","value","isNegative","includes","endsWith","digitsAndSpacesAndDotStr","replace","singleOrNoDotsStr","withoutLeadingZeros","startsWith","real","decimal","toLocaleString","CustomTextInputStyles","div","defaultProps","CustomTextInput","React","memo","props","rate","setValue","symbol","stringValue","setStringValue","numberValue","setNumberValue","getUpdatedValue","safeNumber","formattedString","focused","setFocused","className","cn","type","inputMode","formNoValidate","onFocus","onBlur","onKeyDown","shiftKey","ctrlKey","altKey","metaKey","test","preventDefault","onChange","innerNumber","target","CurrencyBlockWithDropdownStyles","YourBalanceBlock","WrappedWithPrevNextButtons","prev","next","children","code","onClick","CurrencyBlockWithDropdown","currencyName","setCurrencyName","fromCurrencyName","total","setTotal","balances","currencies","values","name","toSymbol","val","findIndex","currency","balance","MiddleSwapButtonStyles","MiddleSwapButton","height","viewBox","width","d","fill","stroke","strokeWidth","CurrencyBlock","Centered","ExchangeWidgetStyles","StyledCenteredSelect","select","GlobalCurrencyDropdown","toCurrencyName","setToValue","allRates","ExchangeWidget","selectedCurrencies","onCurrenciesChanged","swapCurrencies","exchangeDisabled","Math","abs","saveBalances","MOCKED_RATES","EUR","PLN","USD","CHF","balanceAndRatesApi","Promise","s","setTimeout","useMock","TEN_SECONDS","console","warn","rates","expiration","Date","now","cacheValue","localStorage","getItem","valueWithExpiration","JSON","parse","removeItem","process","completeUrl","fetch","json","fullResult","setItem","stringify","GlobalStyle","createGlobalStyle","AppStyles","ThemeSwitchWrapper","App","isMocked","setMocked","isDark","setDark","String","strVal","setStrVal","isNaN","n","useNumberHash","from_to_defaultVal","setCurrencies","p","useCurrencies","apiBalances","ratesWithExpiration","fetchUSDBaseRates","timeout","clearTimeout","usdRates","setUsdRates","useMemo","errorOrEmptyData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.179be07c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst readHash = (url: string = window.location.href) => {\n    const items = ((url?.split('#')[1] || '').split('?')[1] || '')\n        .split('&')\n        .map(i => i.split('='))\n        .map(([_, v]) => [_, v ? decodeURIComponent(v) : true]);\n    return Object.fromEntries(items);\n};\n\n/**\n * It works like `React.useState`, just browsers url - its hash part (query in the hash) as storage\n * quite handy to share the state of the app, and quite lightweight, hope u will like it\n */\nexport function useHash<T extends string | boolean = string>(hashKey: string, defaultVal: T): [T, (t: T) => void] {\n    const initialState = () => readHash()[hashKey] || defaultVal;\n    const [currentValue, setCurrentValue] = useState<T>(initialState);\n\n    useEffect(() => {\n        const setFromHashIfChanged = e => {\n            const newHashValue = readHash(e.newURL)[hashKey];\n            if (newHashValue !== currentValue) {\n                setCurrentValue(newHashValue);\n            }\n        };\n\n        window.addEventListener('hashchange', setFromHashIfChanged, false);\n        return () => window.removeEventListener('hashchange', setFromHashIfChanged, false);\n    }, [currentValue, hashKey]);\n\n    return [\n        currentValue,\n        (newVal: T) => {\n            setCurrentValue(newVal);\n            const hashObj = readHash();\n            const entries = Object.entries({ ...hashObj, [hashKey]: newVal }).filter(([_, v]) => v);\n            const [hash] = window.location.hash.split('?');\n            const entriesString = entries.map(([k, v]) => (v === true || !v ? k : [k, v].join('='))).join('&');\n            window.location.hash = `${ hash }${ entries.length ? `?${ entriesString }` : '' }`;\n        }\n    ];\n}\n\n/** Same as `useHash` but for numbers */\nexport function useNumberHash(hashKey: string, defaultVal: number): [number, (t: number) => void] {\n    const [strVal, setStrVal] = useHash(hashKey, String(defaultVal));\n    const num = Number.parseFloat(strVal);\n\n    return [strVal && !isNaN(num) ? num : defaultVal, (n: number) => setStrVal(n + '')];\n}\n","import { useCallback } from 'react';\n\nimport { useHash } from 'utils/useHash/useHash';\n\nexport const useCurrencies = (hashKey: string, from_to_defaultVal: string) => {\n    const [currencies, setCurrencies] = useHash(hashKey, from_to_defaultVal);\n    const [from, to] = (currencies || from_to_defaultVal).split('_');\n\n    return {\n        from,\n        to,\n        onCurrenciesChanged: useCallback(\n            (p: { from?: string; to?: string }) => {\n                setCurrencies([p.from || from, p.to || to].join('_'));\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [from, to]\n        )\n    };\n};\n","import { useCallback, useEffect, useState } from 'react';\n\nexport const useAsync = <Result, Error>(\n    createPromise: (...params: any) => Promise<Result>,\n    isImmediate?: boolean\n): [\n    data: Result | undefined,\n    runAsync: (...params: Parameters<typeof createPromise>) => Promise<Result>,\n    isLoading: boolean,\n    error: Error | undefined\n] => {\n    const [isLoading, setLoading] = useState(false);\n    const [hasTriggeredImmediately, setTriggeredImmediately] = useState<boolean | undefined>(false);\n    const [error, setError] = useState<Error>();\n    const [data, setData] = useState<Result>();\n\n    const runAsync = useCallback(async (...params: Parameters<typeof createPromise>) => {\n        setLoading(true);\n        setData(undefined);\n        setError(undefined);\n        try {\n            const data = await createPromise(...params);\n            setData(data);\n            return data;\n        } catch (err) {\n            setError(err);\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n        if (isImmediate && !hasTriggeredImmediately) {\n            setTriggeredImmediately(true);\n            runAsync();\n        }\n    }, [isImmediate, hasTriggeredImmediately, runAsync]);\n\n    return [data, runAsync, isLoading, error];\n};\n","import { memo } from 'react';\n\nexport function roundNumber(num: number): string {\n    const twoDigits = Number.parseFloat(num + '').toFixed(4);\n    // to prevent case where $0.01 = €0.01\n    const flooredValue = twoDigits.substring(0, twoDigits.length - 2);\n\n    // max 2 digits after dot, no zeroes in the end\n    return Number.parseFloat(flooredValue) + '';\n}\n\nexport const areEqual =\n    <Props>(keys: (keyof Props)[]): Parameters<typeof memo>[1] =>\n    (from, to) =>\n        keys.every(key => from[key] === to[key]);\n\nexport interface Setter<T> {\n    (newValue: T): void;\n}\n\nexport interface CurrencyWithBalance {\n    name: string;\n    symbol: string;\n    balance: number;\n}\n\nexport interface Theme {\n    background: string;\n    active: string;\n    disabled: string;\n    disabledText: string;\n    text: string;\n    lightBorder: string;\n}\n\nexport const themes: Record<string, Theme> = {\n    default: {\n        background: 'white',\n        active: '#f2f2f2',\n        disabled: '#e4e4e4',\n        disabledText: '#b3b3b3',\n        text: '#494949',\n        lightBorder: '#cccccc'\n    },\n    dark: {\n        background: '#2864d0',\n        active: '#11387a',\n        disabled: '#728499',\n        disabledText: '#abbfd5',\n        text: 'white',\n        lightBorder: '#c2c2c2'\n    }\n};\n\nexport { useCurrencies } from './useCurrencies';\nexport { useHash, useNumberHash } from './useHash';\nexport { useAsync } from './useAsync';\n","import styled from 'styled-components/macro';\n\n// Material \"ripple\" button - https://codepen.io/finnhvman/pen/jLXKJw\nexport const RippleButton = styled.button`\n    background-position: center;\n    background-color: ${ ({ theme }) => theme.background };\n    font-size: 40px;\n    font-weight: bold;\n    line-height: 40px;\n    outline: none;\n    padding: 7px 12px 10px 12px;\n    transition: background 0.8s;\n\n    &:hover {\n        background: ${ ({ theme }) => theme.active }\n            radial-gradient(circle, transparent 1%, ${ ({ theme }) => theme.background } 1%) center/70000%;\n    }\n\n    &:active {\n        background-color: ${ ({ theme }) => theme.active };\n        background-size: 100%;\n        transition: background 0s;\n    }\n`;\n\nexport const NormalButton = styled(RippleButton)`\n    font-size: 16px;\n    font-weight: normal;\n    line-height: 16px;\n    padding: 8px 12px;\n`;\n","export function pharseUserInput(value: string, isNegative: boolean = false): [number, string] {\n    isNegative = isNegative || (value.includes('-') && !value.endsWith('+'));\n    const digitsAndSpacesAndDotStr = value.replace(/[^0-9,. ]/g, '');\n    // replace all dots except last https://stackoverflow.com/questions/9694930/remove-all-occurrences-except-last/28673744\n    const singleOrNoDotsStr = digitsAndSpacesAndDotStr.replace(/[.,](?=.*[.,])/g, '').replace(/[,]/g, '.');\n    let withoutLeadingZeros = singleOrNoDotsStr.replace(/^0+/, '');\n    if (withoutLeadingZeros.startsWith('.')) {\n        withoutLeadingZeros = `0${ withoutLeadingZeros }`;\n    }\n    const [real, decimal = ''] = withoutLeadingZeros.split('.');\n    withoutLeadingZeros =\n        Number(real.replace(/ /g, '')).toLocaleString('en-US').replace(/,/g, ' ') +\n        (decimal ? `.${ decimal }` : withoutLeadingZeros.endsWith('.') ? '.' : '');\n\n    return [\n        Number.parseFloat(singleOrNoDotsStr.replace(/ /g, '') || '0') * (isNegative ? -1 : 1),\n        `${ singleOrNoDotsStr ? (isNegative ? '-' : '+') : '' }${\n            singleOrNoDotsStr.length === 1 ? singleOrNoDotsStr : withoutLeadingZeros\n        }`\n    ];\n}\n","import styled from 'styled-components/macro';\nimport { themes } from '../utils';\n\nexport const CustomTextInputStyles = styled.div`\n    border: 1px solid ${ ({ theme }) => theme.lightBorder };\n    border-radius: 4px;\n    display: flex;\n    margin-right: 8px;\n    align-items: center;\n    width: 100%;\n\n    &.focused {\n        border: 1px solid ${ ({ theme }) => theme.text };\n\n        .currency-near-input {\n            color: ${ ({ theme }) => theme.text };\n        }\n    }\n\n    .currency-near-input {\n        font-size: 30px;\n        padding: 8px;\n        color: ${ ({ theme }) => theme.lightBorder };\n    }\n\n    input {\n        background: none;\n        border-color: transparent;\n        color: ${ ({ theme }) => theme.text };\n        display: block;\n        font-size: 35px;\n        text-align: right;\n        width: 100%;\n        padding: 6px 4px 6px 0;\n\n        &:focus {\n            border-color: transparent;\n            outline: none;\n        }\n    }\n`;\n\nCustomTextInputStyles.defaultProps = {\n    theme: themes.default\n};\n","import React, { useEffect, useState } from 'react';\nimport cn from 'classnames';\n\nimport { areEqual, roundNumber, Setter } from 'utils';\nimport { pharseUserInput } from './pharseUserInput';\nimport { CustomTextInputStyles } from './CustomTextInput.styles';\n\nexport function getUpdatedValue(value: number, rate: number) {\n    const num = value * rate;\n    return pharseUserInput(roundNumber(num), num < 0);\n}\n\ninterface CustomTextInputProps {\n    rate?: number | null;\n    value: number;\n    setValue: Setter<number>;\n    symbol: string;\n}\n\nexport const CustomTextInput = React.memo((props: CustomTextInputProps) => {\n    const { rate, value, setValue, symbol } = props;\n    const [stringValue, setStringValue] = useState('');\n    const [numberValue, setNumberValue] = useState(0);\n    const onChange = (value: string) => {\n        if (rate) {\n            const [safeNumber, formattedString] = pharseUserInput(value);\n            setStringValue(formattedString);\n            const innerNumber = safeNumber / rate;\n            setNumberValue(innerNumber);\n            setValue(innerNumber);\n        }\n    };\n\n    useEffect(() => {\n        if (rate) {\n            if (numberValue !== value) {\n                const [safeNumber, formattedString] = getUpdatedValue(value, rate);\n                setNumberValue(safeNumber);\n                setStringValue(formattedString);\n            }\n        } else {\n            setStringValue('Loading...  ');\n        }\n    }, [rate, value, numberValue]);\n\n    const [focused, setFocused] = useState(false);\n    return (\n        // of course ideally on mobile here to have 'number' so proper keyboard selected\n        // but to add \"plus\" in front, in browser, without playing with content editable\n        // I chosen text input with custom validations\n        <CustomTextInputStyles className={ cn('pseudo-input', { focused }) }>\n            <div className=\"currency-near-input\">{symbol}</div>\n\n            <input\n                type=\"text\"\n                inputMode=\"numeric\"\n                formNoValidate\n                disabled={ !rate }\n                onFocus={ () => setFocused(true) }\n                onBlur={ () => setFocused(false) }\n                value={ stringValue }\n                onKeyDown={ e => {\n                    // preventing non numeric keydown\n                    if (!e.shiftKey && !e.ctrlKey && !e.altKey && !e.metaKey) {\n                        if (e.key.length === 1 && !/^[0-9,.+-]{1,1}/.test(e.key)) {\n                            e.preventDefault();\n                        }\n                    }\n                } }\n                onChange={ e => onChange(e.target.value) }\n            />\n        </CustomTextInputStyles>\n    );\n}, areEqual<CustomTextInputProps>(['value', 'rate', 'symbol']));\n","import styled from 'styled-components/macro';\nimport { themes } from '../utils';\n\nexport const CurrencyBlockWithDropdownStyles = styled.div`\n    align-items: center;\n    display: flex;\n    height: 150px;\n    padding: 0 8px;\n    position: relative;\n    background: linear-gradient(0deg, ${ ({ theme }) => theme.active } 0%, ${ ({ theme }) => theme.background } 100%);\n\n    select {\n        height: 60px;\n        background: none;\n        width: 150px;\n        font-size: 35px;\n        margin: 0 8px;\n        padding: 8px 0;\n    }\n`;\n\nCurrencyBlockWithDropdownStyles.defaultProps = {\n    theme: themes.default\n};\n\nexport const YourBalanceBlock = styled.div`\n    display: flex;\n    font-size: 16px;\n    justify-content: space-between;\n    position: absolute;\n    left: 57px;\n    bottom: 20px;\n    right: 64px;\n`;\n","import React from 'react';\n\nimport { RippleButton } from 'RippleButton';\n\ninterface WrappedWithPrevNextButtonsProps {\n    prev: () => void;\n    next: () => void;\n    children: React.ReactNode;\n}\n\nexport const WrappedWithPrevNextButtons = (props: WrappedWithPrevNextButtonsProps) => {\n    const { prev, next, children } = props;\n    const onKeyDown = e => {\n        switch (e.code) {\n            case 'ArrowRight':\n                next();\n                break;\n            case 'ArrowLeft':\n                prev();\n                break;\n            default:\n                break;\n        }\n    };\n\n    return (\n        <>\n            <RippleButton onClick={ next } onKeyDown={ onKeyDown }>\n                {'‹'}\n            </RippleButton>\n            {children}\n            <RippleButton onClick={ prev } onKeyDown={ onKeyDown }>\n                {'›'}\n            </RippleButton>\n        </>\n    );\n};\n","import React from 'react';\n\nimport { CurrencyWithBalance, roundNumber, Setter } from 'utils';\n\nimport { CustomTextInput } from 'CustomTextInput';\n\nimport { CurrencyBlockWithDropdownStyles, YourBalanceBlock } from './CurrencyBlockWithDropdown.styles';\nimport { WrappedWithPrevNextButtons } from './WrappedWithPrevNextButtons';\n\nexport interface CurrencyBlockWithDropdownProps {\n    currencyName: string;\n    setCurrencyName: Setter<string>;\n    total: number;\n    fromCurrencyName: string;\n    setTotal: Setter<number>;\n    balances: Record<string, CurrencyWithBalance>;\n    rate?: number | null;\n}\n\nexport const CurrencyBlockWithDropdown = (props: CurrencyBlockWithDropdownProps) => {\n    const { currencyName, setCurrencyName, fromCurrencyName, total, setTotal, balances, rate } = props;\n    const currencies = Object.values(balances).map(({ name }) => name);\n    const next = () => {\n        const val = currencies.findIndex(currency => currency === currencyName) - 1;\n        setCurrencyName(currencies[val < 0 ? currencies.length - 1 : val]);\n    };\n    const prev = () => {\n        const val = currencies.findIndex(currency => currency === currencyName) + 1;\n        setCurrencyName(currencies[val > currencies.length - 1 ? 0 : val]);\n    };\n\n    const toSymbol = balances[currencyName].symbol;\n    return (\n        <CurrencyBlockWithDropdownStyles>\n            <WrappedWithPrevNextButtons next={ next } prev={ prev }>\n                <select value={ currencyName } onChange={ e => setCurrencyName(e.target.value) }>\n                    {currencies.map(name => (\n                        <option value={ name } key={ name }>\n                            {name}\n                        </option>\n                    ))}\n                </select>\n\n                <CustomTextInput rate={ rate } value={ total } setValue={ setTotal } symbol={ toSymbol } />\n\n                <YourBalanceBlock>\n                    <span>\n                        You have&nbsp;&nbsp;{toSymbol} {roundNumber(balances[currencyName].balance)}\n                    </span>\n\n                    {rate && currencyName !== fromCurrencyName && (\n                        <span>\n                            {toSymbol} 1 = {balances[fromCurrencyName].symbol} {roundNumber(1 / rate)}\n                        </span>\n                    )}\n                </YourBalanceBlock>\n            </WrappedWithPrevNextButtons>\n        </CurrencyBlockWithDropdownStyles>\n    );\n};\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\nimport { RippleButton } from './RippleButton';\nimport { themes } from './utils';\n\nconst MiddleSwapButtonStyles = styled.div`\n    text-align: center;\n\n    & button {\n        background: transparent;\n        border: none;\n        border-radius: 4px;\n        padding: 4px 2px 0;\n        position: absolute;\n        margin-top: 2px;\n        transform: translate(-50%, -50%);\n        z-index: 1;\n\n        & > svg > path {\n            fill: ${ ({ theme }) => theme.text };\n        }\n    }\n`;\n\nMiddleSwapButtonStyles.defaultProps = {\n    theme: themes.default\n};\n\n// https://www.iconfinder.com/icons/326707/swap_vert_icon\nexport const MiddleSwapButton = ({ onClick }: { onClick: () => void }) => (\n    <MiddleSwapButtonStyles>\n        <RippleButton onClick={ onClick }>\n            <svg height=\"34\" viewBox=\"0 0 14 18\" width=\"34\">\n                <path\n                    d=\"M11,14 L11,7 L9,7 L9,14 L6,14 L10,18 L14,14 L11,14 L11,14 Z M4,0 L0,4 L3,4 L3,11 L5,11 L5,4 L8,4 L4,0 L4,0 Z\"\n                    fill=\"#000000\"\n                    stroke=\"none\"\n                    strokeWidth=\"1\"\n                />\n            </svg>\n        </RippleButton>\n    </MiddleSwapButtonStyles>\n);\n","import styled from 'styled-components/macro';\nimport { themes } from '../utils';\n\nexport const CurrencyBlock = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: relative;\n`;\n\nexport const Centered = styled.div`\n    display: flex;\n    justify-content: center;\n    z-index: 1;\n\n    & > button {\n        min-width: 50%;\n    }\n`;\n\nexport const ExchangeWidgetStyles = styled.div`\n    border: 1px solid ${ ({ theme }) => theme.lightBorder };\n    border-radius: 4px;\n    margin: -18px 0;\n`;\n\nExchangeWidgetStyles.defaultProps = {\n    theme: themes.default\n};\n","import React from 'react';\nimport styled from 'styled-components/macro';\n\nimport { areEqual, CurrencyWithBalance, roundNumber, Setter } from 'utils';\n\nconst StyledCenteredSelect = styled.select`\n    display: flex;\n    font-weight: bold;\n    font-size: 16px;\n    padding: 8px;\n    background: ${ ({ theme }) => theme.background };\n`;\n\ninterface GlobalCurrencyDropdownProps {\n    toCurrencyName: string;\n    fromCurrencyName: string;\n    setToValue: Setter<string>;\n    balances: Record<string, CurrencyWithBalance>;\n    allRates?: Record<string, number>;\n}\n\nexport const GlobalCurrencyDropdown = React.memo((props: GlobalCurrencyDropdownProps) => {\n    const { toCurrencyName, fromCurrencyName, setToValue, balances, allRates } = props;\n\n    return (\n        <StyledCenteredSelect value={ toCurrencyName } onChange={ e => setToValue(e.target.value) }>\n            {Object.values(balances)\n                .filter(({ name }) => name !== fromCurrencyName)\n                .map(({ name, symbol }) => {\n                    let rate = allRates?.[name];\n\n                    return (\n                        <option value={ name } key={ name }>\n                            {balances[fromCurrencyName].symbol} 1{' = '}\n                            {symbol} {rate ? roundNumber(rate) : 'Loading...'}\n                        </option>\n                    );\n                })}\n        </StyledCenteredSelect>\n    );\n}, areEqual<GlobalCurrencyDropdownProps>(['toCurrencyName', 'fromCurrencyName', 'balances', 'allRates']));\n","import React from 'react';\n\nimport { CurrencyWithBalance, Setter } from 'utils';\nimport { NormalButton } from 'RippleButton';\n\nimport { CurrencyBlockWithDropdown } from '../CurrencyBlockWithDropdown';\nimport { MiddleSwapButton } from '../MiddleSwapButton';\nimport { CurrencyBlock, ExchangeWidgetStyles, Centered } from './ExchangeWidget.styles';\nimport { GlobalCurrencyDropdown } from '../GlobalCurrencyDropdown';\n\ninterface SelectedCurrencies {\n    from: string;\n    to: string;\n}\n\ninterface ExchangeWidgetProps {\n    selectedCurrencies: SelectedCurrencies;\n    onCurrenciesChanged: Setter<Partial<SelectedCurrencies>>;\n    total: number;\n    setTotal: Setter<number>;\n    balances: Record<string, CurrencyWithBalance>;\n    saveBalances: Setter<Record<string, CurrencyWithBalance>>;\n    allRates?: Record<string, number>;\n}\n\nexport const ExchangeWidget = (props: ExchangeWidgetProps) => {\n    const { selectedCurrencies, onCurrenciesChanged, total, setTotal, balances, allRates } = props;\n    const { from: fromCurrencyName, to: toCurrencyName } = selectedCurrencies;\n    const swapCurrencies = () => onCurrenciesChanged({ to: fromCurrencyName, from: toCurrencyName });\n    const setToValue = toCurrencyName =>\n        toCurrencyName === fromCurrencyName ? swapCurrencies() : onCurrenciesChanged({ to: toCurrencyName });\n    const setFromValue = fromCurrencyName =>\n        toCurrencyName === fromCurrencyName ? swapCurrencies() : onCurrenciesChanged({ from: fromCurrencyName });\n\n    const exchangeCurrencies = () => {\n        if (!allRates) {\n            return;\n        }\n        balances[fromCurrencyName].balance = balances[fromCurrencyName].balance - total;\n        balances[toCurrencyName].balance = balances[toCurrencyName].balance + total * allRates[toCurrencyName];\n        props.saveBalances({ ...balances });\n    };\n\n    const exchangeDisabled =\n        !allRates ||\n        !total ||\n        total > balances[fromCurrencyName].balance ||\n        total < -balances[toCurrencyName].balance / allRates[toCurrencyName] ||\n        Math.abs(total * allRates[toCurrencyName]) < 0.01 ||\n        Math.abs(total) < 0.01;\n\n    return (\n        <CurrencyBlock>\n            <Centered>\n                <GlobalCurrencyDropdown\n                    toCurrencyName={ toCurrencyName }\n                    fromCurrencyName={ fromCurrencyName }\n                    setToValue={ setToValue }\n                    balances={ balances }\n                    allRates={ allRates }\n                />\n            </Centered>\n\n            <ExchangeWidgetStyles>\n                <CurrencyBlockWithDropdown\n                    currencyName={ fromCurrencyName }\n                    setCurrencyName={ setFromValue }\n                    fromCurrencyName={ fromCurrencyName }\n                    total={ total }\n                    setTotal={ setTotal }\n                    balances={ balances }\n                    rate={ -1 }\n                />\n\n                <MiddleSwapButton onClick={ swapCurrencies } />\n\n                <CurrencyBlockWithDropdown\n                    currencyName={ toCurrencyName }\n                    setCurrencyName={ setToValue }\n                    fromCurrencyName={ fromCurrencyName }\n                    total={ total }\n                    setTotal={ setTotal }\n                    balances={ balances }\n                    rate={ allRates && allRates[toCurrencyName] }\n                />\n            </ExchangeWidgetStyles>\n\n            <Centered>\n                <NormalButton onClick={ exchangeCurrencies } disabled={ exchangeDisabled }>\n                    Exchange\n                </NormalButton>\n            </Centered>\n        </CurrencyBlock>\n    );\n};\n","import { CurrencyWithBalance } from './utils';\n\nexport function getMockedBalances() {\n    // const createBalance = () => Math.round(Math.random() * 100);\n    const createBalance = () => 100;\n\n    return {\n        PLN: { name: 'PLN', symbol: 'zł', balance: createBalance() },\n        EUR: { name: 'EUR', symbol: '€', balance: createBalance() },\n        USD: { name: 'USD', symbol: '$', balance: createBalance() },\n        CHF: { name: 'CHF', symbol: '₣', balance: createBalance() }\n    };\n}\n\nexport const MOCKED_RATES = { EUR: 0.85, PLN: 3.89, USD: 1, CHF: 0.92 };\nexport const balanceAndRatesApi = {\n    async fetchMyBalances(): Promise<Record<string, CurrencyWithBalance>> {\n        await new Promise(s => setTimeout(s, 300)); // simulating delay\n\n        return getMockedBalances();\n    },\n\n    async fetchUSDBaseRates(useMock = false): Promise<{ rates: Record<string, number>; expiration?: number }> {\n        const TEN_SECONDS = 10 * 1000;\n        if (useMock) {\n            await new Promise(s => setTimeout(s, 300)); // simulating delay\n            console.warn('fetchUSDBaseRates is mocked');\n            return { rates: MOCKED_RATES, expiration: Date.now() + TEN_SECONDS };\n        }\n        // I know that it wont work in safari by default because of security policies\n        const cacheValue = localStorage.getItem('fetchUSDBaseRates');\n        if (cacheValue) {\n            const valueWithExpiration = JSON.parse(cacheValue || '{}');\n            if (valueWithExpiration && Date.now() < valueWithExpiration.expiration) {\n                return valueWithExpiration;\n            } else {\n                localStorage.removeItem('fetchUSDBaseRates');\n            }\n        }\n\n        const app_id = process.env.REACT_APP_OPENEXCHANGERATES_APP_ID;\n        const completeUrl = `https://openexchangerates.org/api/latest.json?app_id=${ app_id }`;\n        const {\n            rates\n        }: {\n            disclaimer: string;\n            license: string;\n            timestamp: number;\n            base: string;\n            rates: Record<string, number>;\n        } = await (await fetch(completeUrl)).json();\n\n        const fullResult = { rates, expiration: Date.now() + TEN_SECONDS };\n        localStorage.setItem('fetchUSDBaseRates', JSON.stringify(fullResult));\n        return fullResult;\n    }\n};\n","import styled, { createGlobalStyle } from 'styled-components/macro';\nimport { Theme, themes } from 'utils';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    background: ${ ({ theme }: { theme: Theme }) => theme.active };\n    color: ${ ({ theme }) => theme.text };\n  }\n\n  select {\n    margin: 0;\n  }\n\n  .pseudo-input,\n  select,\n  button {\n    border-radius: 4px;\n    border: 1px solid ${ ({ theme }) => theme.lightBorder };\n    color: ${ ({ theme }) => theme.text };\n    cursor: pointer;\n\n    &:hover, &:focus, &.focused {\n      &:not([disabled]) {\n        box-shadow: 0 0 4px #999;\n        border-color: ${ ({ theme }) => theme.text };\n        outline: none;  \n      }\n    }\n\n    &[disabled] {\n      cursor: not-allowed;\n      background: ${ ({ theme }) => theme.disabled };\n      border-color: ${ ({ theme }) => theme.disabledText };\n      color: ${ ({ theme }) => theme.disabledText };\n    }\n  }\n`;\n\nGlobalStyle.defaultProps = {\n    theme: themes.default\n};\n\nexport const AppStyles = styled.div`\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    margin: auto;\n    max-width: 600px;\n    padding: 0 8px;\n    position: relative;\n    height: 100vh;\n`;\n\nexport const ThemeSwitchWrapper = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    margin-top: -2px;\n    padding: 8px;\n    margin-bottom: 40px;\n\n    > button {\n        margin-left: 16px;\n    }\n`;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { ThemeProvider } from 'styled-components/macro';\n\nimport { CurrencyWithBalance, themes, useAsync, useCurrencies, useHash, useNumberHash } from 'utils';\n\nimport { ExchangeWidget } from 'ExchangeWidget';\nimport { NormalButton } from 'RippleButton';\nimport { balanceAndRatesApi } from 'balanceAndRatesApi';\nimport { ThemeSwitchWrapper, AppStyles, GlobalStyle } from './App.styles';\n\nexport const App = () => {\n    const [isMocked, setMocked] = useHash<boolean>('mocked', false);\n    const [isDark, setDark] = useHash<boolean>('dark', false);\n\n    const [total, setTotal] = useNumberHash('toConvert', 10);\n    const { from, to, onCurrenciesChanged } = useCurrencies('currencies', 'PLN_EUR');\n\n    const [apiBalances, , isLoading] = useAsync(() => balanceAndRatesApi.fetchMyBalances(), true);\n\n    // here should be \"save balance\" api instead of mocks\n    const [balances, saveBalances] = useState<Record<string, CurrencyWithBalance> | null>(null);\n    useEffect(() => {\n        if (apiBalances) {\n            saveBalances(apiBalances);\n        }\n    }, [apiBalances]);\n\n    const [ratesWithExpiration, fetchUSDBaseRates, , error] = useAsync((isMocked: boolean) =>\n        balanceAndRatesApi.fetchUSDBaseRates(isMocked)\n    );\n\n    useEffect(() => {\n        if (!ratesWithExpiration || !ratesWithExpiration.expiration) {\n            return;\n        }\n        const timeout = setTimeout(() => fetchUSDBaseRates(isMocked), ratesWithExpiration.expiration - Date.now());\n        return () => clearTimeout(timeout);\n    }, [ratesWithExpiration, isMocked, fetchUSDBaseRates]);\n\n    useEffect(() => {\n        fetchUSDBaseRates(isMocked);\n    }, [isMocked, fetchUSDBaseRates]);\n\n    const { rates } = ratesWithExpiration || {};\n    const [usdRates, setUsdRates] = useState<Record<string, number>>();\n    useEffect(() => {\n        if (rates) {\n            // preventing \"loading\" case\n            setUsdRates(rates);\n        }\n    }, [rates]);\n\n    const allRates = useMemo(() => {\n        if (!usdRates) {\n            return usdRates;\n        } else {\n            return Object.fromEntries(\n                Object.entries(usdRates).map(([currency, usdRate]) => [currency, usdRate / usdRates[from]])\n            );\n        }\n    }, [usdRates, from]);\n\n    const errorOrEmptyData = !isLoading && (error || !balances);\n    const theme = isDark ? themes.dark : themes.default;\n\n    return (\n        <ThemeProvider theme={ theme }>\n            <GlobalStyle theme={ theme } />\n\n            <ThemeSwitchWrapper>\n                {isMocked && <NormalButton onClick={ () => setMocked(false) }>Disable 𓆟</NormalButton>}\n\n                <NormalButton onClick={ () => setDark(!isDark) }>\n                    {isDark ? 'To day theme ☼' : 'To night theme ☽'}\n                </NormalButton>\n            </ThemeSwitchWrapper>\n\n            <AppStyles>\n                {isLoading && <div>Loading...</div>}\n                {errorOrEmptyData && (\n                    <div>\n                        {error && (\n                            <>\n                                API error happened, try to{' '}\n                                <NormalButton onClick={ () => setMocked(true) }>Use Mocks 𓆟</NormalButton>\n                            </>\n                        )}\n\n                        {!error && <>Can not load currencies</>}\n                    </div>\n                )}\n\n                {!errorOrEmptyData && balances && (\n                    <ExchangeWidget\n                        selectedCurrencies={ { from, to } }\n                        onCurrenciesChanged={ onCurrenciesChanged }\n                        total={ total }\n                        setTotal={ setTotal }\n                        balances={ balances }\n                        saveBalances={ saveBalances }\n                        allRates={ allRates }\n                    />\n                )}\n            </AppStyles>\n        </ThemeProvider>\n    );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}